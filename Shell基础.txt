1.Shell是一个命令行解释器
2分类：
	Bourne Shell(BShell)，包含sh、ksh、Bash(Linux中标准)、psh、zsh
	C Shell (Unix)，包含csh、tcsh
3.Linux中支持的Shell（在/etc/shells中查看），进入那种shell，直接输入就行，如sh,csh，退出为exit
  一个shell中可以调用另一个shell，一直调用下去，变为儿子辈、孙子辈的
4.echo (opt) [输出内容]
  opt:
	-e  支持反斜线控制的字符转换
		\b    退格符，向左删除键
		\n    换行符 
		\r    回车键
		\t    制表符
		\v    垂直制表符
		\0nnn 八进制ASCII码输出字符
		\xhh  十六进制ASCII码输出字符
  echo -e "\e[1;31m wzx love bxy \e[0m"
		30m=黑色，31m=红色，32m=绿色，33m=黄色，34m=蓝色，35m=洋红，36m=青色，37m=白色
5.脚本
	1.#代表注释
	2.第一行必须加#!/bin/bash
	3.执行的时候可以用：bash+文件名执行，也可以用chmod 755赋予执行权限后直接文件名（最好用绝对路径）执行
6.alias
	（查看系统中所有命令的别名）
  alias 别名=‘'原命令'
	（设定命令别名，临时生效）
  vi ~/.bashrc
	（写入环境变量配置文件，别名永久生效，执行source .bashrc会直接生效）
  unalias 别名
	（删除别名）
7.history (opt) [历史命令保存文件]
	（直接history就是系统中操作的历史命令）
  opt:
	-c  清空历史命令（尽量不要清空）
	-w  把缓存中的历史命令写入历史命令保存文件~/.bash_history（默认保存1000条，可在/etc/profile中histsize修改）

8.输出重定向
	标准输出重定向：
			命令 > 文件        覆盖的方式
			 命令 >> 文件      追加的方式
	标准错误输出重定向：
			错误命令 2> 文件   覆盖的方式
			错误命令 2>> 文件  追加的方式
	正确输出和错误输出同时保存：
			命令 > 文件 2>&1   覆盖的方式
			命令 >> 文件 2>&1  追加的方式 （常见操作）
			命令 &> 文件       覆盖的方式  （ls &> /dev/null 将查询结果丢入文件黑洞，后面是空文件）
			命令 &>> 文件      追加的方式 （常见操作）
			命令 >> 文件1 2>>文件2 正确的追加到1，错误的追加到2 （常见操作）
	（注：一般用追加，而且是同时保存）
9.输入重定向
	wc (opt) [文件名]
	（统计文件内容）
	  opt:
		-c  统计字节数
		-w  统计单词数（靠空格区分）
		-l  统计行数
	（直接wc回车可以输入内容，ctrl+d统计所有内容）
10.多命令顺序执行
	;	命令1;命令2	多个命令顺序执行
	&&	命令1&&命令2	逻辑与，当命令1正确执行，命令2才会执行；当命令1不正确执行，则命令2不执行
	||	命令1||命令2	逻辑或，当命令1正确执行，命令2不会执行；当命令1不正确执行，命令2执行
  例：ls && echo yes || echo no
	（利用输出检测命令是否正确）
11.管道符
	命令1 | 命令2
	  （命令1的正确输出作为命令2的操作对象，命令1出错，命令2不执行）
	ls -l /etc | more           netstat -an | grep ESTABLISHED（查看服务器上连接了多少个客户端）
	netstat -an | grep ESTABLISHED | wc -l（输出客户端数目）
12.通配符
	?	匹配一个任意字符
	*	匹配任何内容
	[]	匹配括号中的任意一个字符
13.Bash中变量的默认类型都是字符型，用户自定义变量只在当前的Shell中生效，环境变量在当前Shell和这个Shell的所有子Shell中生效；变量可以自定义（包括环境变量），但是对系统生效的环境变量名和变量作用是固定的；环境变量是全局变量，用户自定义变量是局部变量，环境变量大写！
14.$变量名
	（变量调用）
	echo $x；echo $name
15.变量叠加
	x=123
	x="$x"456	x=123456
	x=${x}789	x=123456789
16.set (opt)
	（变量查看）
	opt:
		-u	如果设定此选项，调用未声明变量时会报错（默认无任何提示）
17.unset 变量名
	（变量删除，同时可以删除环境变量，但是子Shell中删除父的，退回到父中还会存在）
18.pstree
    （查看进程树，可以看到当前有几个bash）
19.export 变量名=变量值
    （设置环境变量）
20.env
    （查看环境变量）
21.PATH环境变量：系统查找命令的路径；echo $PATH；PATH="$PATH":/root（增加环境变量的值，临时生效）
22.locale
    （查询当前系统语系）
    LANG    定义系统主语系的变量
    LC_ALL  定义整体语系的变量
23.位置参数变量是为了向脚本中传递需要的值,$n,$*,$@,$#；预定义变量,$?,$$,$!
24.read (opt) (变量名)
    （接收键盘输入）
   opt:
        -p "提示信息"   在等待read输入时，输出提示信息
        -t 秒数         read命令会一直等待用户输入，使用此选项可以指定等待时间
        -n 字符数       read命令只接受指定的字符数，就会执行
        -s              隐藏输入的数据，适用于机密信息的输入
25.declare (+/-)(opt) 变量名
    （声明变量类型）  
   opt:
        -   给变量设定类型属性
        +   取消变量的类型属性
        -a  将变量声明为数组型，输出要用echo ${movie[*]}
        -i  将变量声明为整数型
        -x  将变量声明为环境变量
        -r  将变量声明为只读变量（只读不能删除、修改）
        -p  显示指定变量的被声明的类型
26.shell数值运算
    （1）expr/let数值运算工具
        例：
            dd=$(expr $aa + $bb)   "+"号左右两侧必须有空格
            let dd=$aa+$bb
    （2）$((运算式))/$[运算式]
        例：
            ff=$(($aa+$bb))     最好用这种
            ff=$[$aa+$bb]
27.source 配置文件
    （重新加载环境配置文件）
28.环境配置文件
    （1）/etc/profile   改历史命令条数
    （2）~/.bashrc      改别名
    （3）/etc/bashrc    改登录提示符PS1
    （4）~/.bash_logout 注销时生效的环境变量配置文件
    （5）/etc/issue     本地终端提示信息
    （6）/etc/issue.net 远程终端提示信息
29.元字符
	*		前一个字符匹配0次或任意多次
	.		匹配除了换行符外任意一个字符
	^		匹配行首
	$		匹配行尾
	[]		匹配中括号中指定的任意一个字符，只匹配一个字符，如果一行能匹配到，那么整行输出
	[^]		匹配除中括号的字符以外的任意一个字符，即取反
	\		转义符
	\{n\}	表示其前面的字符恰好出现n次，由于包含匹配，也是多次匹配，n的倍数也可以被匹配到
	\{n,\}	表示其前面的字符出现不小于n次
	\{n,m\}	表示其前面的字符至少出现n次，至多出现m次

   注：grep的输出结果可以赋值给变量，如x=`grep -c "abc" test.txt`；或者用x=$(grep -c "abc" test.txt)
30.cut (opt) 文件名
    （列截取）
     opt:
            -f 列号     提取第几列，多列用,分隔
            -d 分隔符   按照指定分隔符分割列（默认是制表符），空格指定是一个，多个不能识别
31.awk '条件1{动作1}条件2{动作2}...' 文件名
    （文件截取）
    条件：
        一般使用关系表达式作为条件：x>10判断变量x是否大于10；x>=10；x<=10
    动作：
        格式化输出；流程控制语句
32.sed (opt) '动作' 文件名
    （字符替换、截取）
   opt:
        -n  一般sed命令会把所有数据都输出到屏幕，如果加入此选择，则只会把经过sed命令处理的行输出到屏幕
        -e  允许对输入数据应用多条sed命令编辑，用;隔开
        -i  用sed的修改结果直接修改读取数据的文件，而不是由屏幕输出
   动作：
        a   追加
        c   行替换
        i   插入
        d   删除    2,4d 删除了第2行到第4行
        p   打印
        s   字串替换    s/旧字串/新字串/g加了/g会把所有的字串替换，不加只会替换一个 
33.sort (opt) 文件名
    （排序命令）
   opt:
        -f      忽略大小写
        -n      以数值型进行排序，默认使用字符串型排序
        -r      反向排序
        -t      指定分隔符，默认分隔符是制表符
        -k n,m  按照指定的字段范围排序，从第n字段开始，m字段结束（默认到行尾）
34.wc (opt) 文件名
    （统计命令）
   opt:
        -l  只统计行数
        -w  只统计单词数
        -m  只统计字符数
35.按照文件类型进行判断：
    -d 文件     判断文件是否存在，并且是否是目录文件（是目录为真）
    -e 文件     判断该文件是否存在（存在为真）
    -f 文件     判断该文件是否存在，并且是否为普通文件（是普通文件为真）
36.判断格式：
    test -e /root/install.log
    [-e /root/install.log] （最好使用这一种）
37.文件权限判断：
    -r 文件     判断该文件是否存在，并且是否该文件拥有读权限（有读权限为真）
    -w 文件     判断该文件是否存在，并且是否该文件拥有写权限（有写权限为真）
    -x 文件     判断该文件是否存在，并且是否该文件拥有执行权限（有执行权限为真）
38.文件之间进行比较：
    文件1 -nt 文件2     判断文件1的修改时间是否比文件2的新（如果新则为真）
    文件1 -ot 文件2     判断文件1的修改时间是否比文件2的旧（如果旧则为真）
    文件1 -ef 文件2     判断文件1的inode号是否一致，判断硬链接的方法
39.整数之间比较：
    整数1 -eq 整数2     判断整数1是否和整数2相等（相等为真）
    整数1 -ne 整数2     判断整数1是否和整数2不相等（不相等为真）
    整数1 -gt 整数2     判断整数1是否大于整数2（大于为真）
    整数1 -lt 整数2     判断整数1是否小于整数2（小于为真）
    整数1 -ge 整数2     判断整数1是否大于等于整数2（大于等于为真）
    整数1 -le 整数2     判断整数1是否小于等于整数2（小于等于为真）
40.字符串的判断：
    -z 字符串       判断字符串是否为空（为空返回真）
    -n 字符串       判断字符串是否为非空（非空返回真）
    字串1 == 字串2  判断字串1是否和字串2相等（相等返回真）
    字串1 != 字串2  判断字串1是否和字串2不相等（不相等返回真）
41.多重条件判断：
    判断1 -a 判断2  逻辑与，两个都为真才是真
    判断1 -r 判断2  逻辑或，两个有一个为真就是真
    ! 判断          逻辑非，原始判断取反
42.单分支if条件语句：
    if [ 条件判断式 ]；then
            程序
    fi
    或者：
    if [ 条件判断式 ]
       then
       程序
    fi
43.双分支if条件语句
	if [ 条件判断式 ]
		then
		条件成立时执行的程序
		else
		条件不成立时执行的程序
	fi
44.多分支if条件语句
	if [ 条件判断式1 ]
		then
			条件1成立时执行的程序1
	elif [ 条件判断式2 ]
		then
			条件2成立时执行的程序2
	...
	else
		当所有条件都不成立时，最后执行的程序
	fi
45.case多分支语句
	case $变量名 in
		“值1”)
		如果变量的值等于值1，则执行程序1
		;;
		“值2”)
		如果变量的值等于值2，则执行程序2
		;;
		“值3”)
		如果变量的值等于值3，则执行程序3
		;;
		...
		*)
		如果变量都不是以上值，则执行此程序
		;;
	esac
46.for循环
	（1）for 变量 in 值1 值2 值3...
			do
				程序
			done
	（2）for ((初始值;循环控制条件;变量变化))
			do
				程序
			done
47.while循环（条件判断式成立开始循环）
	while [ 条件判断式 ]
		do
			程序
		done
48.until循环（与while相反，条件判断式成立就停止循环）
	until [ 条件判断式 ]
		do
			程序
		done